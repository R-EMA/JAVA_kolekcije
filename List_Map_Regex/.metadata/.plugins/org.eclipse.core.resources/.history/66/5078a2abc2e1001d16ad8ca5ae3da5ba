package liste;

import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Vector;

/**
 * 
 * @author emma
 * 
 * all about Collection (interface) List
 *
 */

public class MainList {

	public static void main(String[] args) {
		
		/*
		 * List je interfejs koji "pozajmljuje" metode generičkim klasama 
		 * ArrayList, LinkedList i Vector, a kojima se kreiraju objekti koji se
		 * sastoje od više vrednosti istog tipa podataka - elementi liste
		 *
		 * elementi se mogu dodavati na određenoj poziciji
		 * elementima se može pristupati na osnovu vrednosti indeksa
		 * indeksi elemenata su rastućeg redosleda u opsegu od 0 do n-1, gde je n broj elemenata
		 * 
		 * metode zajedničke svim klasama koje implementiraju interfejs List najbolje je objasniti kroz primere
		 * 
		 * sve liste mogu se štampati print() i println() metodom.
		 */

		// ArrayList je najbliža JAVA nizovima jer se sastoji od vrednosti smeštenih 
		// na uzastopnim lokacijama
		// neefikasna u listama kod kojih se često menja broj elemenata
		
		// ArrayList
		// kreiranje prazne liste - arrayList
		List<String> lstr = new ArrayList<String>();
		
		//praznu listu treba popuniti
		//metod .add() koristi se za dodavanje članova u listu.
		lstr.add("prvi");  // index 0
		lstr.add("drugi"); // index 1		
		lstr.add("treci"); // index 2
		System.out.println(lstr);
		//metodom .add() može se dodati element na tačno određenoj poziciji
		//ovde je bitno da se indeks tj oznaka pozicije nalazi u rasponu 0 - (n-1)
		lstr.add(1, "dodatak"); // dodaje se na poziciji (index 1) a 
		// što rezultuje pomeranjem vrednosti drugi i treći.
		System.out.println(lstr);
		
		// metod .size() vraća dužinu liste (broj trenutnih not-null vrednosti)
		System.out.println("Broj članova liste: " + lstr.size());
		
		// metod .get() čita vrednost sa date pozicije 
		System.out.println(" prva/poslednja vrednost = " + lstr.get(0) + "/" + lstr.get(lstr.size()-1));
		
		// metod ...
		
		// LinkedList - povezana lista
		// sve što važi za ArrayList, važi i za LinedList
		// razlika: elementi LinkedList liste ne nalaze se na uzastopnim lokacijama, ...
		// pa se za svaki element čuva vrednost i adresa sledećeg elementa
		// bolji izbor ako se očekuje česta promena broja elemenata
		
		// kreiranje povezane liste 
		List<String> llstr = new LinkedList<String>();
		
		llstr.add("1-jedan");
		llstr.add("2-dva");
		System.out.println(llstr);
		
		// metod .addAll() koristi se za dodavanje elemenata iz postojeće kolekcije
		// pri čemu se ...
		// dodaje na kraj postojeće lisre
		llstr.addAll(lstr);
		System.out.println(llstr);
		// pri čemu može da se dodeli pozicija od koje se vrši dodavanje
		// dodaje od određene pozicije
		llstr.addAll(1, lstr); //od prvog indexa (mesto br 2)
		System.out.println(llstr);
		// .addAll() može da doda sam sebe
		llstr.addAll(llstr)	;
		System.out.println(llstr);
		
		// kreiranje vektora
		
		
	}

}

/*
 * LIST je interfejs, uređena kolekcija u kojoj se elementi mogu ponavljati.
 * Strukturno je slična nizovima (array), s tim što je promenljive dužine.
 * interfej list nasleđuje metode iz Collection interfejsa, 
 * a na koje dodaje svoje metode bitne za rad sa elementima liste.
 * 
 * Interfejs List implementiraju klase ArrayList, LinkedList i Vector.
 * 
 * P.S. Većina metoda za rad sa ArrayList i LinkedList je obrađena na 
 * predavanjima i vežbama.
 */
